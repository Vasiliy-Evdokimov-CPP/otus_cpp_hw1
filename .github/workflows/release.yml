name: 'C++ CI'

on:
  push:
    branches:
      - main
      - feature/github_actions
  workflow_dispatch:

jobs:
  build_ubuntu:
    runs-on: ubuntu-latest
    permissions: write-all

    # outputs:
    #   output1: ${{ steps.step_out.outputs.test }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
      # - run: sudo apt-get update && sudo apt-get install cmake libboost-test-dev -y    
      - run: sudo apt-get update && sudo apt-get install cmake -y
      - run: cmake . -DPATCH_VERSION=${{ github.run_number }}
      - run: cmake --build .
      # - run: cmake --build . --target test
      - run: cmake --build . --target package
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}_Linux
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false
      - name: Upload Release Asset Ubuntu
        id: upload-release-asset        
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./helloworld-0.0.${{ github.run_number }}-Linux.deb
          asset_name: helloworld-0.0.${{ github.run_number }}-Linux.deb
          asset_content_type: application/vnd.debian.binary-package
      # - id: step_out
      #   run: echo "test="${{ steps.create_release.outputs.upload_url }} >> "$GITHUB_OUTPUT"
  build_windows:
    runs-on: windows-latest
    needs: build_ubuntu
    permissions: read-all
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install CMake
        uses: ssrobins/install-cmake@v1
        with:
          version: 3.24.3

      # - name: Install boost
      #   uses: MarkusJx/install-boost@v2.4.4
      #   id: install-boost
      #   with:      
      #       boost_version: 1.83.0      
      #       boost_install_dir: C:\boost_directory      
      #       platform_version: 2022      
      #       toolset: msvc
      
      # - name: Configure CMake For Boost
      #   run: |
      #     cmake . 
      #     -DCMAKE_BUILD_TYPE=Release -B build\  
      #     -DBoost_INCLUDE_DIR=${{steps.install-boost.outputs.BOOST_ROOT}}/include\
      #     -DBoost_LIBRARY_DIRS=${{steps.install-boost.outputs.BOOST_ROOT}}/lib
      #   env:
      #     BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}     

      - run: cmake . -DPATCH_VERSION=${{ github.run_number }}
      - run: cmake --build .
      # - run: cmake --build . --target test
      - run: cmake --build . --target package
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}_Windows
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false

      # - name: upload_url echo
      #   env:
      #     UUR:  ${{ needs.build_ubuntu.outputs.output1 }}
      #   run: echo "upload_url = $UUR ="

      - name: Upload Release Asset Windows
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.build_ubuntu.outputs.upload_url }} # needs.build_ubuntu.outputs.upload_url # steps.create_release.outputs.upload_url
          asset_path: ./helloworld-0.0.${{ github.run_number }}-win64.zip
          asset_name: helloworld-0.0.${{ github.run_number }}-win64.zip
          asset_content_type: application/zip